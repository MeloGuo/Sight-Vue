const fs = require('fs')
const path = require('path')
const components = require('../../components.json')
const render = require('json-templater/string')
const uppercamelcase = require('uppercamelcase')

// A string constant defining the operating system-specific end-of-line marker
const endOfLine = require('os').EOL

const OUTPUT_PATH = path.join(__dirname, '../../src/index.js')
const IMPORT_TEMPLATE = 'import {{name}} from \'../packages/{{package}}/index.js\''
const INSTALL_COMPONENT_TEMPLATE = '{{name}}'
const MAIN_TEMPLATE = `/* Automatically generated by './build/bin/build-entry.js' */

{{include}}

const components = [
  {{install}}
]

const install = function (Vue, opts = {}) {
  components.forEach(component => Vue.component(component.name, component))
}

/* istanbul ignore if */
if (typeof window !== 'undefined' && window.vue) {
  install(window.vue)
}

export default {
  version: '{{version}}',
  install,
  {{list}}
}
`

if (components.font) delete components.font

const componentNames = Object.keys(components)

const includeComponentTemplate = []
const installTemplate = []
const listTemplate = []

componentNames.forEach(name => {
  const componentName = uppercamelcase(name)

  includeComponentTemplate.push(render(IMPORT_TEMPLATE, {
    name: componentName,
    package: name
  }))

  installTemplate.push(render(INSTALL_COMPONENT_TEMPLATE, {
    name: componentName,
    component: name
  }))

  listTemplate.push(render(`${componentName}`))
})

const template = render(MAIN_TEMPLATE, {
  include: includeComponentTemplate.join(endOfLine),
  install: installTemplate.join(',' + endOfLine),
  version: process.env.VERSION || require('../../package.json').version,
  list: listTemplate.join(',' + endOfLine)
})

fs.writeFileSync(OUTPUT_PATH, template)
console.log('[build entry] DONE: ', OUTPUT_PATH)
